version "4.10"

//-------------------------------------------------
// Composite Armor Plate
//-------------------------------------------------

/*
A ballistic plate backed by both kevlar and ceramic that slots into most protective vests.

Stops most rounds (except for anything past 7.76mm) but struggles in durability 
due to it being made from a fragile material.

Since it slots into the torso, it won't protect you against headshots and leg shots.

*/

const DUR_ARMORPLATE=25;
const ENC_ARMORPLATE=115;
const STRIP_ARMORPLATE=STRIP_ARMOUR+20;
const HDLD_ARMORPLATE="cbp";

class HDArmorPlate:HDMagAmmo{

	int vestlayer;
	
	default{
		+inventory.invbar
		+hdpickup.cheatnogive
		+hdpickup.notinpockets
		+hdpickup.fitsinbackpack
		//+inventory.isarmor
		inventory.amount 1;
		hdmagammo.maxperunit DUR_ARMORPLATE;
		hdmagammo.magbulk ENC_ARMORPLATE;
		tag "$TAG_ARMORPLATE";
		inventory.icon "APL0A0";
	}
	
	override string PickupMessage() {
	    String pickupmessage = Stringtable.Localize("$PICKUP_ARMORPLATE"); 
	    return pickupmessage;
	}

	
	//bool mega;
	int cooldown;
	override bool isused(){return true;}
	override int getsbarnum(int flags){
		int ms=mags.size()-1;
		if(ms<0)return -1000000;
		return mags[ms]%1000;
	}
	
	//because it can intentionally go over the maxperunit amount
	override void AddAMag(int addamt){
		if(addamt<0)addamt=DUR_ARMORPLATE;
		mags.push(addamt);
		amount=mags.size();
	}
	//keep types the same when maxing
	override void MaxCheat(){
		syncamount();
		for(int i=0;i<amount;i++){
			mags[i]=DUR_ARMORPLATE;
		}
	}

	action void A_WearPlate(){
		bool helptext=HDWeapon.CheckDoHelpText(self);
		invoker.syncamount();
		int dbl=invoker.mags[invoker.mags.size()-1];
		//if holding use, cycle to next armour
		if(!!player&&player.cmd.buttons&BT_USE){
			invoker.mags.insert(0,dbl);
			invoker.mags.pop();
			invoker.syncamount();
			return;
		}
		
		//Requires either a garrison or battle armor
		bool vest=HDArmourWorn(FindInventory("HDArmourWorn"));

		invoker.wornlayer=STRIP_ARMORPLATE;	
		bool intervening=!HDPlayerPawn.CheckStrip(self,invoker,false);
		invoker.wornlayer=0;

		if(!vest){A_Log("You need a garrison/battle armor vest to use this.");}

		if(intervening||!vest){

			//check if it's ONLY the armour layer that's in the way
			invoker.wornlayer=STRIP_ARMORPLATE+1;
			bool notarmour=!HDPlayerPawn.CheckStrip(self,invoker,false);
			invoker.wornlayer=0;

			if(
				notarmour
				||invoker.cooldown>0
			){
				HDPlayerPawn.CheckStrip(self,self);
			}else invoker.cooldown=10;
			return;
		}

		//and finally put on the actual armour
		HDArmorPlate.PlateChangeEffect(self,50);
		A_GiveInventory("HDArmorPlateWorn");
		let worn=HDArmorPlateWorn(FindInventory("HDArmorPlateWorn"));

		worn.durability=dbl;
		invoker.amount--;
		invoker.mags.pop();

		if(helptext){
			string blah=string.format("You insert the %s into your vest. ","armor plate");
			double qual=double(worn.durability)/(DUR_ARMORPLATE);
			if(qual<0.1)A_Log(blah.."You as might as well be using a sheet of paper.",true);
			else if(qual<0.3)A_Log(blah.."There are chunks missing from it.",true);
			else if(qual<0.6)A_Log(blah.."It's shattered in the middle.",true);
			else if(qual<0.75)A_Log(blah.."There's a few holes in it.",true);
			else if(qual<0.95)A_Log(blah.."It has caught some rounds.",true);
			else	A_Log(blah.."It is in good condition.",true);
		}

		invoker.syncamount();
	}
	
	override void doeffect(){
		if(cooldown>0)cooldown--;
		if(!amount)destroy();
	}

	override void syncamount(){
		if(amount<1){return;}
		super.syncamount();
		for(int i=0;i<amount;i++){
			mags[i]=min(mags[i],DUR_ARMORPLATE);
		}
	}

	override inventory createtossable(int amt){
		let sct=super.createtossable(amt);
		return sct;
	}

	override void beginplay(){
		super.beginplay();
		cooldown=0;
		if(!mags.size())mags.push(DUR_ARMORPLATE); //not vital, just sets a default
	}

    override void consolidate(){}
	override double getbulk(){
		syncamount();
		double blk=0;
		for(int i=0;i<amount;i++){
			blk+=ENC_ARMORPLATE;
		}
		return blk;
	}

	override bool BeforePockets(actor other){
		//put on the armour right away
		if(
			other.player
			&&other.player.cmd.buttons&BT_USE
			&&other.findinventory("HDArmourWorn")
			&&!other.findinventory("HDArmorPlateWorn")
			)
		{
			wornlayer=STRIP_ARMORPLATE;
			vestlayer=STRIP_ARMOUR;
			bool intervening=!HDPlayerPawn.CheckStrip(other,self,false);
			vestlayer=STRIP_ARMOUR;
			wornlayer=0;

			if(intervening)return false;

			HDArmorPlate.PlateChangeEffect(other,50);
			let worn=HDArmorPlateWorn(other.GiveInventoryType("HDArmorPlateWorn"));
			int durability=mags[mags.size()-1];
			worn.durability=durability;
			destroy();
			return true;
		}
		return false;
	}


	override void actualpickup(actor other,bool silent){
		cooldown=0;
		if(!other)return;
		int durability=mags[mags.size()-1];
		HDArmorPlate aaa=HDArmorPlate(other.findinventory("HDArmorPlate"));

		if(aaa){
			double totalbulk=0.5;
			for(int i=0;i<aaa.mags.size();i++){
				totalbulk+=0.5;
			}
			if(totalbulk*hdmath.getencumbrancemult()>3.)return;
		}
		if(!trypickup(other))return;
		aaa=HDArmorPlate(other.findinventory("HDArmorPlate"));
		aaa.syncamount();
		aaa.mags.insert(0,durability);
		aaa.mags.pop();
		//aaa.checkmega();
		other.A_StartSound(pickupsound,CHAN_AUTO);
		HDPickup.LogPickupMessage(other,pickupmessage());
	}
	
	//modified to make removing your jacket faster than
	//removing an armor vest
	static void PlateChangeEffect(actor owner,int delay=15){
		owner.A_StartSound("weapons/pocket",CHAN_BODY);
		owner.vel.z+=1.;
		let onr=HDPlayerPawn(owner);
		if(onr){
			onr.stunned+=10;
			onr.striptime=delay;
			//onr.AddBlackout(256,96,128);
		}//else owner.A_SetBlend("00 00 00",1,6,"00 00 00");
	}
	states{
	spawn:
		APL0 ABC -1 nodelay{
			Invoker.SyncAmount();
			/*
				this doesn't work properly
			int amt=invoker.amount;
			if(amt>16)frame=0;
			else if(amt>9)frame=1;
			else if(amt>0)frame=2;
			
			*/
		}stop;
	use:
		TNT1 A 0 A_WearPlate();
		fail;
	}
}


class HDArmorPlateWorn:HDArmourWorn{
	default{
		+inventory.isarmor
		//HDArmourworn.ismega true;
		inventory.maxamount 1;
		tag "$TAG_ARMORPLATE";
		HDDamageHandler.priority 0;
		HDPickup.overlaypriority 15000;
		HDPickup.wornlayer STRIP_ARMORPLATE;
	}
	override void beginplay(){
		durability=DUR_ARMORPLATE;
		super.beginplay();
	}

	override double RestrictSpeed(double speedcap){
		return min(speedcap,3.2);
	}
	override double getbulk(){
		return (ENC_ARMORPLATE*0.1);
	}

	override void DrawHudStuff(
		hdstatusbar sb,
		hdplayerpawn hpl,
		int hdflags,
		int gzflags
	){
		vector2 coords=
			(hdflags&HDSB_AUTOMAP)?(4,86):
			(hdflags&HDSB_MUGSHOT)?((sb.hudlevel==1?-110:-55),-11):
			(0,-sb.mIndexFont.mFont.GetHeight()*2)
		;
		string armoursprite="APL0A0";//front layer
		string armourback="APL0Z0";//back layer
		sb.drawbar(
			armoursprite,armourback,
			clamp(durability,0,DUR_ARMORPLATE),DUR_ARMORPLATE,
			coords,-1,sb.SHADER_VERT,
			gzflags
		);
		sb.drawstring(
			sb.pnewsmallfont,sb.FormatNumber(clamp(durability,0,DUR_ARMORPLATE)),
			coords+(8,-7),gzflags|sb.DI_ITEM_CENTER|sb.DI_TEXT_ALIGN_RIGHT,
			Font.CR_DARKGRAY,scale:(0.5,0.5)
		);
	}


	override inventory CreateTossable(int amt){
		if(!HDPlayerPawn.CheckStrip(owner,self))return null;

		//armour sometimes crumbles into dust
		if(durability<random(1,3)){
			for(int i=0;i<15;i++){
				actor aaa=spawn("WallChunk",owner.pos+(0,0,owner.height-24),ALLOW_REPLACE);
				vector3 offspos=(frandom(-12,12),frandom(-12,12),frandom(-16,4));
				aaa.setorigin(aaa.pos+offspos,false);
				aaa.vel=owner.vel+offspos*frandom(0.3,0.6);
				aaa.scale*=frandom(1.8,2.);
				aaa.setshade("#262626");
			}
			destroy();
			return null;
		}

		//finally actually take off the armour
		let tossed=HDArmorPlate(owner.spawn("HDArmorPlate",
			(owner.pos.xy,owner.pos.z+owner.height-20),
			ALLOW_REPLACE
		));
		tossed.mags.clear();
		tossed.mags.push(durability);
		tossed.amount=1;
		HDArmorPlate.PlateChangeEffect(owner,15);
		destroy();
		return tossed;
	}


	states{
	spawn:
		TNT1 A 0;
		stop;
	}
	
	//called from HDPlayerPawn and HDMobBase's DamageMobj
	override int,name,int,double,int,int,int HandleDamage(
		int damage,
		name mod,
		int flags,
		actor inflictor,
		actor source,
		double towound,
		int toburn,
		int tostun,
		int tobreak
	){
		let victim=owner;

		//approximation of "thickness" of armour
		int alv=3;

		if(
			(flags&DMG_NO_ARMOR)
			||mod=="staples"
			||mod=="maxhpdrain"
			||mod=="internal"
			||mod=="jointlock"
			||mod=="falling"
			||mod=="slime"
			||mod=="bleedout"
			||mod=="drowning"
			||mod=="poison"
			||mod=="electrical"
			||durability<random(1,2)
			||!victim
		)return damage,mod,flags,towound,toburn,tostun,tobreak;


		//which is just a vest not a bubble...
		if(
			inflictor
			&&inflictor.default.bmissile
		){
			double impactheight=inflictor.pos.z+inflictor.height*0.5;
			double shoulderheight=victim.pos.z+victim.height-16;
			double waistheight=victim.pos.z+victim.height*0.4;
			double impactangle=absangle(victim.angle,victim.angleto(inflictor));
			if(impactangle>90)impactangle=180-impactangle;
			bool shouldhitflesh=(
				impactheight>shoulderheight
				||impactheight<waistheight
				||impactangle>80
			)?!random(0,5):!random(0,31);
			if(shouldhitflesh)alv=0;
			else if(impactangle>80)alv=random(1,alv);
		}

		//missed the armour entirely
		if(alv<1)return damage,mod,flags,towound,toburn,tostun,tobreak;


		//some numbers
		int tobash=0;
		int armourdamage=0;

		int resist=0;
		if(durability<DUR_ARMORPLATE){
			int breakage=DUR_ARMORPLATE-durability;
			resist-=random(0,breakage);
		}

		int originaldamage=damage;


		//start treating damage types
		if(
			mod=="hot"
			||mod=="cold"
		){
			if(random(0,alv)){
				damage=max(random(0,1-random(0,alv)),damage-30);
				if(!random(0,200-damage))armourdamage+=(damage>>3);
			}
		}else if(mod=="piercing"){
			resist+=90*(alv+10);
			if(resist>0){
				damage-=resist;
				tobash=min(originaldamage,resist)>>3;
			}
			armourdamage=random(0,originaldamage>>2);
		}else if(mod=="slashing"){
			resist+=150+25*alv;
			if(resist>0){
				damage-=resist;
				tobash=min(originaldamage,resist)>>2;
			}
			armourdamage=random(0,originaldamage>>2);
		}else if(
			mod=="teeth"
			||mod=="claws"
			||mod=="natural"
		){
			resist+=random((alv<<4),200+50*alv);
			if(resist>0){
				damage-=resist;
				tobash=min(originaldamage,resist)>>3;
			}
			armourdamage=random(0,originaldamage>>3);
		}else if(
			mod=="balefire"
		){
			if(random(0,alv)){
				towound-=max(1,damage>>2);
				armourdamage=random(0,damage>>2);
			}
		}else if(
			mod=="bashing"
			||mod=="melee"
		){
			armourdamage=clamp((originaldamage>>3),0,random(0,alv));

			//player punch to head
			bool headshot=inflictor&&(
				(
					inflictor.player
					&&inflictor.pitch<-3.2
				)||(
					HDHumanoid(inflictor)
					&&damage>50
				)
			);
			if(!headshot){
				damage=int(damage*(1.-(alv*0.1)));
			}
		}else{
			//any other damage not taken care of above
			resist+=50*alv;
			if(resist>0){
				damage-=resist;
				tobash=min(originaldamage,resist)>>random(0,2);
			}
			armourdamage=random(0,originaldamage>>random(1,3));
		}
		
		if(hd_debug)console.printf(owner.gettag().."  took "..originaldamage.." "..mod.." from "..(source?source.gettag():"the world")..((inflictor&&inflictor!=source)?("'s "..inflictor.gettag()):"").."  converted "..tobash.."  final "..damage.."   lost "..armourdamage);


		//set up attack position for puff and knockback
		vector3 puffpos=victim.pos;
		if(
			inflictor
			&&inflictor!=source
		)puffpos=inflictor.pos;
		else if(
			source
			&&source.pos.xy!=victim.pos.xy
		)puffpos=(
			victim.pos.xy+victim.radius*(source.pos.xy-victim.pos.xy).unit()
			,victim.pos.z+min(victim.height,source.height*0.6)
		);
		else puffpos=(victim.pos.xy,victim.pos.z+victim.height*0.6);

		//add some knockback even when target unhurt
		if(
			damage<1
			&&tobash<1
			&&victim.health>0
			&&victim.height>victim.radius*1.6
			&&victim.pos!=puffpos
		){
			victim.vel+=(victim.pos-puffpos).unit()*0.01*originaldamage;
			let hdp=hdplayerpawn(victim);
			if(
				hdp
				&&!hdp.incapacitated
			){
				hdp.wepbobrecoil2+=(frandom(-5.,5.),frandom(2.5,4.))*0.01*originaldamage;
				hdp.playrunning();
			}else if(random(0,255)<victim.painchance)hdmobbase.forcepain(victim);
		}

		//armour breaks up visibly
		if(armourdamage>3){
			actor ppp=spawn("FragPuff",puffpos);
			ppp.vel+=victim.vel;
		}
		if(armourdamage>random(0,2)){
			vector3 prnd=(frandom(-1,1),frandom(-1,1),frandom(-1,1));
			actor ppp=spawn("WallChunk",puffpos+prnd);
			ppp.vel+=victim.vel+(puffpos-owner.pos).unit()*3+prnd;
			ppp.setshade("#262626");
		}


		//apply stuff
		if(tobash>0)victim.damagemobj(
			inflictor,source,min(tobash,victim.health-1),
			"bashing",DMG_NO_ARMOR|DMG_THRUSTLESS
		);

		if(armourdamage>0)durability-=armourdamage;
		//break effect
		
		if(durability<1)
		{
			owner.a_startsound("armor/plates/break",30,CHANF_OVERLAP,1.0);
			for(int i=0;i<15;i++)
			{
				actor aaa=spawn("WallChunk",owner.pos+(0,0,owner.height-24),ALLOW_REPLACE);
				vector3 offspos=(frandom(-12,12),frandom(-12,12),frandom(-16,4));
				aaa.setorigin(aaa.pos+offspos,false);
				aaa.vel=owner.vel+offspos*frandom(0.3,0.6);
				aaa.scale*=frandom(1.8,2.);
				aaa.setshade("#262626");
			}
			destroy();
		}

		return damage,mod,flags,towound,toburn,tostun,tobreak;
	}

	//called from HDBulletActor's OnHitActor
	override double,double OnBulletImpact(
		HDBulletActor bullet,
		double pen,
		double penshell,
		double hitangle,
		double deemedwidth,
		vector3 hitpos,
		vector3 vu,
		bool hitactoristall
	){
		let hitactor=owner;
		if(!owner)return 0,0;
		let hdp=HDPlayerPawn(hitactor);
		let hdmb=HDMobBase(hitactor);

		//if standing right over an incap'd victim, bypass armour
		if(
			bullet.pitch>80
			&&(
				(hdp&&hdp.incapacitated)
				||(
					hdmb
					&&hdmb.frame>=hdmb.downedframe
					&&hdmb.instatesequence(hdmb.curstate,hdmb.resolvestate("falldown"))
				)
			)
			&&!!bullet.target
			&&abs(bullet.target.pos.z-bullet.pos.z)<bullet.target.height
		)return pen,penshell;

		double hitheight=hitactoristall?((hitpos.z-hitactor.pos.z)/hitactor.height):0.5;

		double addpenshell=30;

		//poorer armour on legs and head
		//sometimes slip through a gap
		int crackseed=int(level.time+angle)&(1|2|4|8|16|32);
		
		//No head and leg armor
		
		//original values
		//0.8 head
		//0.4 legs
		
		if(hitheight>0.8){addpenshell=0;}
		
		else if(hitheight<0.4){addpenshell=0;}
		
		else if(
			crackseed>max(durability,8)
		){
			//torso: just kinda uneven
			addpenshell*=frandom(0.95,1.1);
		}

		int armourdamage=0;


		if(addpenshell>0){
			//degrade and puff
			double bad=min(pen,addpenshell)*bullet.stamina*0.0005;
			armourdamage=random(-1,int(bad));

			if(
				!armourdamage
				&&bad
				&&frandom(0,10)<bad
			)armourdamage=1;

			if(armourdamage>0){
				actor p=spawn(armourdamage>2?"FragPuff":"WallChunk",bullet.pos,ALLOW_REPLACE);
				if(p)p.vel=hitactor.vel-vu*2+(frandom(-1,1),frandom(-1,1),frandom(-1,3));
			}else if(pen>addpenshell)armourdamage=1;
		}else if(addpenshell>-0.5){
			//bullet leaves a hole in the webbing
			armourdamage+=max(random(0,1),(bullet.stamina>>7));
		}
		else if(hd_debug)console.printf("missed the armour!");

		if(hd_debug)console.printf(hitactor.getclassname().."  armour resistance:  "..addpenshell);
		penshell+=addpenshell;

		//add some knockback even when target unhurt
		if(
			pen>2
			&&penshell>pen
			&&hitactor.health>0
			&&hitactoristall
		){
			hitactor.vel+=vu*0.001*hitheight*mass;
			if(
				hdp
				&&!hdp.incapacitated
			){
				hdp.wepbobrecoil2+=(frandom(-5.,5.),frandom(2.5,4.))*0.01*hitheight*mass;
				hdp.playrunning();
			}else if(random(0,255)<hitactor.painchance) hdmobbase.forcepain(hitactor);
		}

		if(armourdamage>0){durability-=armourdamage;owner.a_startsound("armor/plates/hit",29,CHANF_OVERLAP,1);}
		if(durability<1)
		{
			owner.a_startsound("armor/plates/break",30,CHANF_OVERLAP,1.0);
			for(int i=0;i<15;i++)
			{
				actor aaa=spawn("WallChunk",owner.pos+(0,0,owner.height-24),ALLOW_REPLACE);
				vector3 offspos=(frandom(-12,12),frandom(-12,12),frandom(-16,4));
				aaa.setorigin(aaa.pos+offspos,false);
				aaa.vel=owner.vel+offspos*frandom(0.3,0.6);
				aaa.scale*=frandom(1.8,2.);
				aaa.setshade("#262626");
			}
			destroy();
		}
		return pen,penshell;
	}
}

class HDArmorPlatePickup:HDPickupGiver{
	default{
		//$Category "Items/Hideous Destructor"
		//$Title "Composite Armor Plate"
		//$Sprite "APL0A0"
		//+missilemore
		+hdpickup.fitsinbackpack
		+inventory.isarmor
		inventory.icon "APL0A0";
		hdpickupgiver.pickuptogive "HDArmorPlate";
		hdpickup.bulk ENC_ARMORPLATE;
		hdpickup.refid HDLD_ARMORPLATE;
		tag "$TAG_ARMORPLATE";
		inventory.pickupmessage "$PICKUP_ARMORPLATE";
	}
	override void configureactualpickup(){
		let aaa=HDArmorPlate(actualitem);
		aaa.mags.clear();
		aaa.mags.push(DUR_ARMORPLATE);
		aaa.syncamount();
	}
}

//-------------------------------------------------
// Spawner
//-------------------------------------------------

class PB_ArmorPlate_Spawner : EventHandler
{
override void CheckReplacement(ReplaceEvent e) {
	if (!PB_HDWeps_AllowReplacement)
		return;
	switch (e.Replacee.GetClassName()) {
	
	
	//bonus items
		case 'HelmFrag' :
			if (!random(0, 36)) {e.Replacement = "HDArmorPlate";}	
			
			break;
	//mass spawn
		case 'GreenArmor' :
			if (!random(0, 12)) {e.Replacement = "PB_ArmorPlate_MultipleDrops";}	
			
			break;
		}
	e.IsFinal = false;
	}
}

class PB_ArmorPlate_MultipleDrops:IdleDummy{
	states{
	spawn:
		TNT1 A 0 nodelay{
			let mgg=HDArmorPlate(spawn("HDArmorPlate",pos,ALLOW_REPLACE));

				spawn("HDArmorPlate",pos+(1,2,1),ALLOW_REPLACE);
				spawn("HDArmorPlate",pos+(-2,-2,-1),ALLOW_REPLACE);
			}stop;
		}
	}